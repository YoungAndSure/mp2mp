syntax = "proto2";

import "proto/indexing/docinfo_type.proto";

enum SearchMode {
  // Consider keys as independent.
  KEYWISE = 0;
  // Consider all keys, prefer doc that matches best each time.
  GREEDY = 1;
  // Consider all keys, prefer doc that hits most keys.
  HITMOSTKEY = 2;
  // Retrieve docinfo.
  DOCINFO = 3;
  // Status
  STATUS = 4;
}

message SearchKey {
  required string name = 1;
  optional float weight = 2;
}

// message Filter {
//   required string name = 1;
//   required string reason = 2;
// }

// message NewDocRequest {
//   repeated string doc_in_json = 1;
// }

// message DebugRequest {
//   optional bool debug = 1;
// }

// message DocFilterRequest {
//   required string channel = 1;
//   required string doc_id = 2;
// }

message SearchRequest {
  required SearchMode search_mode = 1;

  required string searcher_name = 2;

  // For searching inverted index.
  optional string index_type = 3;
  repeated SearchKey key = 4;
  optional int32 request_num = 5;
//   optional int32 max_retrieve_num = 6 [default = 1000];
  repeated string scorer = 7;
  repeated string filter = 8;
  optional int32 posting_list_max_visiting_depth = 9 [default = 2000];
  optional int32 max_searching_keys_num = 10 [default = 30];

  // For searching normal index.
  repeated string doc_id = 50;

  required int64 trace_id = 99;
  required string running_info = 100;
}

message DocInfoRequest {
  required SearchMode search_mode = 1;
  required string index_name = 2;
  repeated string doc_id = 50;
}

message SearchResult {
  required string doc = 1;
  optional float score = 2;
}

message DocInfoResult {
  required DocType doc_type = 1;
  required bytes pb_str = 2;
}

message ServerStatus {
  optional bool loading_index = 1;
  optional int32 instant_search_queue = 2;
  optional int32 long_term_search_queue = 3;
  optional int32 search_done_queue = 4;
}

message SearchResponse {
  // Inverted index result.
  repeated SearchResult result = 1;
  // docinfo result
  repeated DocInfoResult doc_infos = 50;
  optional ServerStatus status = 100;
  repeated string running_info = 200;
}
